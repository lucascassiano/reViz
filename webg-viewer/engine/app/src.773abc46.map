{"version":3,"sources":["0","App.js","viewer/sky.js","viewer.js","index.js"],"names":["App","onClick","openExternal","logo","github","Component","Sky","THREE","vertexShader","uniforms","type","value","Color","skyGeo","SphereBufferGeometry","skyMat","ShaderMaterial","fragmentShader","BackSide","sky","Mesh","animate","OrbitControls","require","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","lookAt","Vector3","canvas","document","getElementById","renderer","WebGLRenderer","setSize","setClearColor","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","add","controls","getObject","gridHelper","GridHelper","render","module","hot","accept"],"mappings":"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","file":"src.773abc46.map","sourceRoot":"../../src","sourcesContent":[null,"import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport logo from \"./icons/logo.svg\";\nimport github from \"./icons/github.svg\";\nimport { shell } from 'electron';\n\nimport \"./app.css\";\nexport default class App extends Component {\n\n    onClick = () => {\n        alert(\"hey\");\n        shell.openExternal('https://github.com/lucascassiano/react-electron-parcel');\n    }\n\n    render() {\n        return (\n            <div className=\"content\">\n                <img className=\"logo\" src={logo} />\n                <h1>React + Electron</h1>\n                <button onClick={this.onClick}>\n                    <img src={github} /> Fork me on Github\n                </button>\n            </div >\n        );\n    }\n}\n\n","import * as THREE from 'three';\n\nexport default class Sky {\n\n    getObject() {\n        // SKYDOME\n        var vertexShader = `\n        varying vec3 vWorldPosition;\n\t\t\tvoid main() {\n\t\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\t\t\tvWorldPosition = worldPosition.xyz;\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            }\n            `;\n        var fragmentShader = `\n        uniform vec3 topColor;\n\t\t\tuniform vec3 bottomColor;\n\t\t\tuniform float offset;\n\t\t\tuniform float exponent;\n\t\t\tvarying vec3 vWorldPosition;\n\t\t\tvoid main() {\n\t\t\t\tfloat h = normalize( vWorldPosition + offset ).y;\n\t\t\t\tgl_FragColor = vec4( mix( bottomColor, topColor, max( pow( max( h, 0.0 ), exponent ), 0.0 ) ), 1.0 );\n            }\n            `;\n        var uniforms = {\n            topColor: { type: \"c\", value: new THREE.Color(0x606060) },\n            bottomColor: { type: \"c\", value: new THREE.Color(0x212121) },\n            offset: { type: \"f\", value: 400 },\n            exponent: { type: \"f\", value: 1.0 }\n        };\n\n        var skyGeo = new THREE.SphereBufferGeometry(1000, 32, 15);\n\n        var skyMat = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n            side: THREE.BackSide\n        });\n\n        var sky = new THREE.Mesh(skyGeo, skyMat);\n        return sky;\n    }\n}","import * as THREE from 'three';\nimport Sky from \"./viewer/sky\";\n\nvar OrbitControls = require('three-orbit-controls')(THREE)\n\nvar scene = new THREE.Scene();\nvar camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\ncamera.position.set(0, 10, -30)\ncamera.lookAt(new THREE.Vector3());\nvar canvas = document.getElementById(\"3d-env\");\nvar renderer = new THREE.WebGLRenderer({ canvas: canvas });\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.setClearColor(0x000000, 0.0);\n//.appendChild(renderer.domElement);\n\nvar geometry = new THREE.BoxGeometry(10, 10, 10);\nvar material = new THREE.MeshBasicMaterial({ color: 0x00ffFF });\nvar cube = new THREE.Mesh(geometry, material);\nscene.add(cube);\n\nvar controls = new OrbitControls(camera);\nlet sky = new Sky();\n\nscene.add(sky.getObject(THREE));\n\nvar gridHelper = new THREE.GridHelper(100, 10, 0x44aaff, 0x808080);\nscene.add(gridHelper);\n\nfunction animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera);\n}\n\nanimate();\n","import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport App from \"./App.js\";\nimport \"./index.css\";\n\nimport './viewer.js';\n\nconst render = () => {\n    ReactDOM.render(<AppContainer><App /></AppContainer>, window.document.getElementById('app'));\n}\nif (typeof window !== 'undefined') { render(); }\n\nif (module.hot) {\n    module.hot.accept(render);\n}\n\n\n\n"]}