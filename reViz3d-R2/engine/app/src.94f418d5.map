{"version":3,"sources":["0","App.js","store/index.js","viewer/sky.js","viewer/viewer.js","index.js"],"names":["App","onClick","openExternal","logo","github","Component","store","defaultState","state","action","type","menuIsOpen","Sky","THREE","vertexShader","uniforms","value","Color","skyGeo","SphereBufferGeometry","skyMat","ShaderMaterial","fragmentShader","BackSide","sky","Mesh","animate","OrbitControls","require","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","lookAt","Vector3","canvas","document","getElementById","renderer","WebGLRenderer","setSize","setClearColor","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","add","controls","getObject","gridHelper","GridHelper","render","rootStore","module","hot","accept"],"mappings":"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","file":"src.94f418d5.map","sourceRoot":"../../src","sourcesContent":[null,"import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport logo from \"./icons/logo.svg\";\nimport github from \"./icons/github.svg\";\nimport { shell } from 'electron';\n\nimport \"./app.css\";\nexport default class App extends Component {\n\n    onClick = () => {\n        alert(\"hey\");\n        shell.openExternal('https://github.com/lucascassiano/react-electron-parcel');\n    }\n\n    render() {\n        return (\n            <div className=\"content\">\n                <img className=\"logo\" src={logo} />\n                <h1>React + Electron</h1>\n                <button onClick={this.onClick}>\n                    <img src={github} /> Fork me on Github\n                </button>\n            </div >\n        );\n    }\n}\n\n","let defaultState = {\n    menuIsOpen: true,\n    project: {\n\n    },\n    environment: {\n        selectedObject: null\n    }\n\n}\n\nlet store = (state, action) => {\n    switch (action.type) {\n        case 'TOGGLE_MENU':\n            let menuIsOpen = !state.menuIsOpen;\n            return Object.assign(state, { menuIsOpen });\n        default:\n            return state\n    }\n}\n\nexport default store;\n\n","import * as THREE from 'three';\n\nexport default class Sky {\n    \n    getObject() {\n        // SKYDOME\n        var vertexShader = `\n        varying vec3 vWorldPosition;\n\t\t\tvoid main() {\n\t\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\t\t\tvWorldPosition = worldPosition.xyz;\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            }\n            `;\n        var fragmentShader = `\n        uniform vec3 topColor;\n\t\t\tuniform vec3 bottomColor;\n\t\t\tuniform float offset;\n\t\t\tuniform float exponent;\n\t\t\tvarying vec3 vWorldPosition;\n\t\t\tvoid main() {\n\t\t\t\tfloat h = normalize( vWorldPosition + offset ).y;\n\t\t\t\tgl_FragColor = vec4( mix( bottomColor, topColor, max( pow( max( h, 0.0 ), exponent ), 0.0 ) ), 1.0 );\n            }\n            `;\n        var uniforms = {\n            topColor: { type: \"c\", value: new THREE.Color(0x606060) },\n            bottomColor: { type: \"c\", value: new THREE.Color(0x212121) },\n            offset: { type: \"f\", value: 400 },\n            exponent: { type: \"f\", value: 1.0 }\n        };\n\n        var skyGeo = new THREE.SphereBufferGeometry(1000, 32, 15);\n\n        var skyMat = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n            side: THREE.BackSide\n        });\n\n        var sky = new THREE.Mesh(skyGeo, skyMat);\n        return sky;\n    }\n}","import * as THREE from 'three';\nimport Sky from \"./sky\";\n\nvar OrbitControls = require('three-orbit-controls')(THREE)\n\nvar scene = new THREE.Scene();\nvar camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);\ncamera.position.set(0, 10, -30)\ncamera.lookAt(new THREE.Vector3());\nvar canvas = document.getElementById(\"3d-env\");\nvar renderer = new THREE.WebGLRenderer({ canvas: canvas });\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.setClearColor(0x000000, 0.0);\n//.appendChild(renderer.domElement);\n\nvar geometry = new THREE.BoxGeometry(10, 10, 10);\nvar material = new THREE.MeshBasicMaterial({ color: 0x00ffFF });\nvar cube = new THREE.Mesh(geometry, material);\nscene.add(cube);\n\nvar controls = new OrbitControls(camera);\nlet sky = new Sky();\n\nscene.add(sky.getObject(THREE));\n\nvar gridHelper = new THREE.GridHelper(100, 10, 0x44aaff, 0x808080);\nscene.add(gridHelper);\n\nfunction animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera);\n}\n\nanimate();\n","import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App.js\";\nimport \"./index.css\";\n\n//Redux - store\nimport { createStore } from \"redux\";\nimport rootStore from \"./store\";\n\nlet store = createStore(rootStore);\n\nconst render = () => {\n    ReactDOM.render(\n        <AppContainer>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </AppContainer>,\n        window.document.getElementById('app'));\n}\nif (typeof window !== 'undefined') { render(); }\n\nif (module.hot) {\n    module.hot.accept(render);\n}\n\n//execute the viewer\nimport './viewer/viewer.js';\n\n\n\n"]}